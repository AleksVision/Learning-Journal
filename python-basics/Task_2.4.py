"""
Программа для решения квадратного уравнения ax² + bx + c = 0
с использованием комплексных чисел для случая отрицательного дискриминанта.
"""

import cmath

print("Решение 1: Решение квадратного уравнения ax² + bx + c = 0 с комплексными числами\n")

# Ввод коэффициентов
a = int(input("Введите a: "))
b = int(input("Введите b: "))
c = int(input("Введите c: "))

# Вычисление дискриминанта
d = (b**2) - (4*a*c)

# Нахождение корней
x1 = (-b + cmath.sqrt(d))/(2*a)
x2 = (-b - cmath.sqrt(d))/(2*a)

print(f"Корни уравнения:")
print(f"x₁ = {x1}")
print(f"x₂ = {x2}")

"""
Программа для решения квадратного уравнения ax² + bx + c = 0
с использованием комплексных чисел для случая отрицательного дискриминанта.
"""

import cmath

# Решение 1
print("Решение 1: Решение квадратного уравнения ax² + bx + c = 0 с комплексными числами\n")

# Ввод коэффициентов
a = int(input("Введите a: "))
b = int(input("Введите b: "))
c = int(input("Введите c: "))

# Вычисление дискриминанта
d = (b**2) - (4*a*c)

# Нахождение корней
x1 = (-b + cmath.sqrt(d))/(2*a)
x2 = (-b - cmath.sqrt(d))/(2*a)

print(f"Корни уравнения:")
print(f"x₁ = {x1}")
print(f"x₂ = {x2}")

# Объяснение:
# Решение 1:
# Использует модуль cmath для работы с комплексными числами.
# Вычисляет дискриминант и находит корни уравнения, включая комплексные корни.

print("\nРешение 2: Решение квадратного уравнения ax² + bx + c = 0 для действительных корней\n")

# Ввод коэффициентов
a = int(input("Введите a: "))
b = int(input("Введите b: "))
c = int(input("Введите c: "))

# Вычисление дискриминанта
d = b**2 - 4*a*c

if d >= 0:
    x1 = (-b + (d ** 0.5)) / (2 * a)
    x2 = (-b - (d ** 0.5)) / (2 * a)
    print(f"Корни уравнения:")
    print(f"x₁ = {x1}")
    print(f"x₂ = {x2}")
else:
    print("Дискриминант отрицательный, действительных корней нет.")

# Объяснение:
# Решение 2:
# Рассматривает только действительные корни.
# Вычисляет дискриминант и находит корни уравнения только в случае положительного или нулевого дискриминанта.

print("\nРешение 3: Решение квадратного уравнения ax² + bx + c = 0 с учетом комплексных корней\n")

# Ввод коэффициентов
a = int(input("Введите a: "))
b = int(input("Введите b: "))
c = int(input("Введите c: "))

# Вычисление дискриминанта
d = b**2 - 4*a*c

if d > 0:
    print((-b + d**0.5) / (2 * a))
    print((-b - d**0.5) / (2 * a))
elif d == 0:
    print((-b) / (2 * a))
else:
    d = complex(d)
    print((-b + d**0.5) / (2 * a))
    print((-b - d**0.5) / (2 * a))

# Объяснение:
# Решение 3:
# Подход, использующий стандартный комплексный тип данных Python.
# Обрабатывает дискриминант и находит корни, включая комплексные корни, если дискриминант отрицательный.
