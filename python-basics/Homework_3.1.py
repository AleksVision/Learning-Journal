""" 
Задача 1
Дан список повторяющихся элементов. Вернуть список с дублирующимися элементами. В результирующем списке не должно быть дубликатов.
"""
# Решение 1
print("Решение 1\n")
# Создаю список с повторяющимися элементами
elements = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10]

# Создаем словарь для подсчета количества вхождений элементов
count_dict = {}

# Подсчитываем количество вхождений каждого элемента
for item in elements:
    if item in count_dict:
        count_dict[item] += 1
    else:
        count_dict[item] = 1

# Создаем новый список только с дублирующимися элементами без повторений
duplicates = [item for item, count in count_dict.items() if count > 1]

# Выводим полученный список
print("Список с дублирующимися элементами без повторений:", duplicates)

# Решение 2
print("Решение 2\n")
# Исходный список с повторяющимися элементами
elements = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10]

# Набор всех элементов, которые встречались
seen = set() # Использование set автоматически убирает дубликаты, не требуя дополнительной фильтрации.
# Набор дубликатов (избегаем повторного добавления)
duplicates = set() # (set) не хранят элементы в определённом порядке.

for item in elements:
    if item in seen:
        duplicates.add(item)
    seen.add(item)

# Вывод результата
print("Список с дублирующимися элементами без повторений:", list(duplicates))

# Решение 3
print("Решение 3\n")

from collections import OrderedDict

# Исходный список
elements = [1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10]

# Набор всех элементов, которые встречались
seen = set()
# OrderedDict для сохранения порядка дубликатов
duplicates = OrderedDict()

for item in elements:
    if item in seen:
        duplicates[item] = None  # Значения не важны, храним только ключи
    seen.add(item)

# Преобразуем OrderedDict обратно в список
print("Список с дублирующимися элементами без повторений:", list(duplicates.keys()))
